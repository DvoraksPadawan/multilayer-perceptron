{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "import numpy as np\n\nclass MLP:\n    def __init__(self):\n        self.input_size = 2\n        self.hidden_size = 4\n        self.output_size = 1\n        \n        self.w1 = np.random.random((self.input_size, self.hidden_size))\n        self.w2 = np.random.random((self.hidden_size, self.output_size))\n        self.b1 = np.random.random((1, self.hidden_size))\n        self.b2 = np.random.random((1, self.output_size))\n        \n        self.ITERS = 10\n        self.LR = 0.1\n        self.alpha = 0.01\n\n    def predict(self, x, return_hidden_output=False):\n        hidden_input = self.forward(x, self.w1, self.b1)\n        hidden_output = self.relu(hidden_input)\n        if return_hidden_output:\n            return hidden_output\n        output_input = self.forward(hidden_output, self.w2, self.b2)\n        output = self.relu(output_input)\n        return output\n\n    def forward(self, l1, w, b):\n        l2 = np.dot(l1, w) + b\n        return l2\n\n    def train(self, X, Y):\n        for _ in range(self.ITERS):\n            for x, y in zip(X, Y):\n                self.backward(x, y)\n\n    def backward(self, x, y):\n        hidden_output = self.predict(x, return_hidden_output=True)\n        pred = self.predict(x)\n        #print(pred)\n        \n        #loss = (pred-y)**2\n        \n        output_error = 2 * (pred - y) \n        #* self.relu(pred)\n        hidden_error = np.dot(output_error, self.w2.T)\n        #print(hidden_error)\n        \n        w2_grad = np.dot(hidden_output.T, output_error)\n        h_grad = np.dot(hidden_output, hidden_error.T)\n        w1_grad = x.T * h_grad\n        #* self.relu(hidden_output)\n        print(w1_grad)\n        #print(hidden_output)\n        \n        self.update_weights(self.w2, self.b2, w2_grad)\n        self.update_weights(self.w1, self.b1, w1_grad)\n\n    def update_weights(self, w, b, error):\n        #error = error[0]\n        #print(error)\n        #dot = np.outer(error, w)\n        #dot = np.atleast_1d(dot.squeeze())\n        #print(w, np.outer(error, w))\n        #print(w.shape, (np.outer(error,w)*self.LR).shape)\n        #w -= self.LR * np.outer(error, w)\n        for i in range(error.shape[0]):\n            w[i] -= self.LR * error[i]\n            b -= self.LR * error[i]\n            #print(i)\n\n    def relu(self, x):\n        return np.where(x > 0, x, 0)\n\nX = np.array([\n    [0, 0],\n    [1, 0],\n    [0, 1],\n    [1, 1]\n])\nY = np.array([[0], [1], [1], [0]])  # Corrected Y values to be a NumPy array\n\nmodel = MLP()\nmodel.train(X, Y)\n\n# Test the trained model\na = model.predict([1, 0])\nprint(\"Prediction:\", a)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 56,
      "outputs": [
        {
          "name": "stdout",
          "text": "[[0. 0.]]\n",
          "output_type": "stream"
        },
        {
          "ename": "<class 'ValueError'>",
          "evalue": "operands could not be broadcast together with shapes (4,) (2,) (4,) ",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[56], line 83\u001b[0m\n\u001b[1;32m     80\u001b[0m Y \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([[\u001b[38;5;241m0\u001b[39m], [\u001b[38;5;241m1\u001b[39m], [\u001b[38;5;241m1\u001b[39m], [\u001b[38;5;241m0\u001b[39m]])  \u001b[38;5;66;03m# Corrected Y values to be a NumPy array\u001b[39;00m\n\u001b[1;32m     82\u001b[0m model \u001b[38;5;241m=\u001b[39m MLP()\n\u001b[0;32m---> 83\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mY\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     85\u001b[0m \u001b[38;5;66;03m# Test the trained model\u001b[39;00m\n\u001b[1;32m     86\u001b[0m a \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict([\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m0\u001b[39m])\n",
            "Cell \u001b[0;32mIn[56], line 34\u001b[0m, in \u001b[0;36mMLP.train\u001b[0;34m(self, X, Y)\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mITERS):\n\u001b[1;32m     33\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m x, y \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(X, Y):\n\u001b[0;32m---> 34\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m)\u001b[49m\n",
            "Cell \u001b[0;32mIn[56], line 56\u001b[0m, in \u001b[0;36mMLP.backward\u001b[0;34m(self, x, y)\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[38;5;66;03m#print(hidden_output)\u001b[39;00m\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mupdate_weights(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mw2, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mb2, w2_grad)\n\u001b[0;32m---> 56\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mupdate_weights\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mw1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mb1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mw1_grad\u001b[49m\u001b[43m)\u001b[49m\n",
            "Cell \u001b[0;32mIn[56], line 67\u001b[0m, in \u001b[0;36mMLP.update_weights\u001b[0;34m(self, w, b, error)\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mupdate_weights\u001b[39m(\u001b[38;5;28mself\u001b[39m, w, b, error):\n\u001b[1;32m     59\u001b[0m     \u001b[38;5;66;03m#error = error[0]\u001b[39;00m\n\u001b[1;32m     60\u001b[0m     \u001b[38;5;66;03m#print(error)\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[38;5;66;03m#print(w.shape, (np.outer(error,w)*self.LR).shape)\u001b[39;00m\n\u001b[1;32m     65\u001b[0m     \u001b[38;5;66;03m#w -= self.LR * np.outer(error, w)\u001b[39;00m\n\u001b[1;32m     66\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(error\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]):\n\u001b[0;32m---> 67\u001b[0m         \u001b[43mw\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mLR\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[43merror\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m     68\u001b[0m         b \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mLR \u001b[38;5;241m*\u001b[39m error[i]\n",
            "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (4,) (2,) (4,) "
          ],
          "output_type": "error"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}